/****************************************************************
    Copyright (C) 2015 Sean Guo. All rights reserved.
					      									  
    > File Name:         < start.S >
    > Author:            < Sean Guo >
    > Mail:              < iseanxp+code@gmail.com >
    > Created Time:      < 2015/07/30 >
    > Last Changed: 
    > Description:		FriendlyARM - Tiny6410 裸机程序 - 汇编启动程序

	ARM上电后，先执行start.S, 配置好相应的寄存器后，调用c语言的main函数;
****************************************************************/
.global _start							
.global delay								//声明全局函数, 供其他程序文件调用
	
_start:
	// ----1. 配置ARM CPU寄存器的外设地址----
	// 把外设的基地址告诉CPU
    ldr r0, =0x70000000 					//对于6410来说,内存(0x00000000～0x60000000),外设(0x70000000-0x7fffffff)
    orr r0, r0, #0x13						//外设大小:256M
	// 在基于ARM的嵌入式应用系统中，存储系统通常是通过系统控制协处理器CP15完成的。
	// CP15包含16个32位的寄存器，其编号为0~15。
	// MCR : ARM寄存器到协处理器寄存器的数据传送
    mcr p15,0,r0,c15,c2,4       			//把r0的值(包括了外设基地址+外设大小)告诉cpu
    
	// ----2. 关看门狗----
	//	Watch Dog - WDCON寄存器 - 0x7E004000 , Watchdog timer control register
	ldr r0, =0x7E004000
	mov r1, #0
	str r1, [r0] 							// 将r0寄存器的值写入地址值为r1的（存储器）内存中

	// ----3. 设置栈 ----
	// C语言需要栈;
	// 栈有三个作用，包括：
	//		1. 保存现场；
	//		2. 传递参数: 汇编代码调用C函数时，需传递参数；
	//		3. 保存临时变量:包括函数的非静态局部变量以及编译器自动生成的其他临时变量；
	// 设置栈，其实就是设置SP寄存器，让其指向一块可用的内存。
	// SD 启动时，S3C6410的内部8K的SRAM被映射到0X0C000000，而ARM 默认的栈是递减的，所以可以让SP 指向0X0C002000；
	ldr sp, =0x0c002000	//栈可用空间: 0x0c002000 ~ 0x0c000000;
	
	// 调用C函数点灯
	bl main

halt:
	b halt	


// 延时函数
// C语言角度的函数定义: void delay(int count);
/************************************************************** 
   对于ARM体系来说，不同语言撰写的函数之间相互调用（mix calls）遵循的是 
   ATPCS（ARM-Thumb Procedure Call Standard）;
   ATPCS主要是定义了函数呼叫时参数的传递规则以及如何从函数返回;
   摘要:
		1. 子程序间通过寄存器R0-R3来传递参数，这时，寄存器R0R3可以记作A1-A4。
			被调用的子程序在返回前无需恢复寄存器R0-R3的内容。
		2. 在子程序中，使用寄存器R4-R11来保存局部变量．这时，寄存器R4-R11可以记作V1-V8.
***************************************************************/
delay:
delay_loop:		
	# 此处ro的值为C语言程序中的传参count;
	cmp r0, #0
	sub r0, r0, #1
	bne delay_loop
	mov pc, lr
//  与2.leds_c_sp/的LED闪烁情况进行对比;
//  体会汇编函数的高效率;
